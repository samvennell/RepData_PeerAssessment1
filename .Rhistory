}
b<-poldata(47)
b<-poldata(c(1,4,47,9)
)
rm(list=ls())
poldata <-function(datanums) {
datanums_str<-sprintf("%03d",datanums)
specdata<-list()
datatoreturn<-data.frame()
for (i in datanums) {
specdata[[i]]<-read.csv(paste0("C:/Users/Sam/Downloads/rprog-data-specdata/specdata/",sprintf("%03d",i),".csv"))
datatoreturn<-data.frame(rbind(datatoreturn,specdata[[i]]))
}
output<-datatoreturn
}
poldata <-function(datanums,directory="C:/Users/Sam/Downloads/rprog-data-specdata/specdata/") {
datanums_str<-sprintf("%03d",datanums)
specdata<-list()
datatoreturn<-data.frame()
for (i in datanums) {
specdata[[i]]<-read.csv(paste0(directory,sprintf("%03d",i),".csv"))
datatoreturn<-data.frame(rbind(datatoreturn,specdata[[i]]))
}
output<-datatoreturn
}
a<-poldata(4)
poldata <-function(datanums,datadir="C:/Users/Sam/Downloads/rprog-data-specdata/specdata/") {
datanums_str<-sprintf("%03d",datanums)
specdata<-list()
datatoreturn<-data.frame()
for (i in datanums) {
specdata[[i]]<-read.csv(paste0(datadir,sprintf("%03d",i),".csv"))
datatoreturn<-data.frame(rbind(datatoreturn,specdata[[i]]))
}
output<-datatoreturn
}
a<-poldata(4)
names(a)
max(a$ID)
min(a$ID)
unique(a$ID)
pollutantmean<-function(directory,pollutant,id=1:332) {
calcdata<-poldata(id,dir=directory)
if (pollutant == "sulfate") {
polmean<-mean(calcdata$sulfate,na.rm=TRUE)
}
if pollutant == "nitrate" {
polmean<-mean(calcdata$nitrate,na.rm=TRUE)
}
foutput<-polmean
}
if (pollutant == "sulfate") polmean<-mean(calcdata$sulfate,na.rm=TRUE)
pollutantmean<-function(directory,pollutant,id=1:332) {
calcdata<-poldata(id,dir=directory)
if (pollutant == "sulfate") {
polmean<-mean(calcdata$sulfate,na.rm=TRUE)
}
if (pollutant == "nitrate") {
polmean<-mean(calcdata$nitrate,na.rm=TRUE)
}
foutput<-polmean
}
pollutantmean(1:10)
pollutantmean("nitrate",1:10)
pollutantmean<-function(directory="C:/Users/Sam/Downloads/rprog-data-specdata/specdata/",pollutant,id=1:332) {
calcdata<-poldata(id,dir=directory)
if (pollutant == "sulfate") {
polmean<-mean(calcdata$sulfate,na.rm=TRUE)
}
if (pollutant == "nitrate") {
polmean<-mean(calcdata$nitrate,na.rm=TRUE)
}
foutput<-polmean
}
pollutantmean("nitrate",1:10)
pollutantmean("C:/Users/Sam/Downloads/rprog-data-specdata/specdata/","nitrate",1:10)
pollutantmean(dir="C:/Users/Sam/Downloads/rprog-data-specdata/specdata/","nitrate",1:10)
pollutantmean(dir="C:/Users/Sam/Downloads/rprog-data-specdata/specdata/","nitrate",id=1:10)
pollutantmean(dir="C:/Users/Sam/Downloads/rprog-data-specdata/specdata/",pollutant="nitrate",id=1:10)
pollutantmean(pollutant="nitrate",id=1:10)
pollutantmean<-function(directory,pollutant,id=1:332) {
calcdata<-poldata(id,dir=directory)
if (pollutant == "sulfate") {
polmean<-mean(calcdata$sulfate,na.rm=TRUE)
}
if (pollutant == "nitrate") {
polmean<-mean(calcdata$nitrate,na.rm=TRUE)
}
foutput<-polmean
}
pollutantmean("C:/Users/Sam/Downloads/rprog-data-specdata/specdata/","nitrate",id=1:10)
pollutantmean<-function(directory,pollutant,id=1:332) {
calcdata<-poldata(id,datadir=directory)
if (pollutant == "sulfate") {
polmean<-mean(calcdata$sulfate,na.rm=TRUE)
}
if (pollutant == "nitrate") {
polmean<-mean(calcdata$nitrate,na.rm=TRUE)
}
foutput<-polmean
}
pollutantmean("C:/Users/Sam/Downloads/rprog-data-specdata/specdata/","nitrate",id=1:10)
b<-pollutantmean("C:/Users/Sam/Downloads/rprog-data-specdata/specdata/","nitrate",id=1:10)
b
b<-pollutantmean("C:/Users/Sam/Downloads/rprog-data-specdata/specdata/","sulfate",id=1:10)
b<-pollutantmean("C:/Users/Sam/Downloads/rprog-data-specdata/specdata/","nitrate",id=70:72)
b<-pollutantmean("C:/Users/Sam/Downloads/rprog-data-specdata/specdata/","nitrate",id=23)
completecase<-data.frame()
names(completecase)<-c("id","nobs")
completecase<-data.frame(ncol=2)
names(completecase)<-c("id","nobs")
names(completecase)
completecase$a<-1
completecase<-data.frame()
count(newrow)
length(a)
149.6/8
pi*12742
92.95713/8
7917.5117/8
library(swirl)
swirl()
swirl()
3.5
print(g2)
sh%>%head
head(sh)
nh
median(resampledMedians)
median(sh)
sam<-sample(fh,nh*B,replace=TRUE)
resam<-matrix(sam,B,nh)
apply(resam,1,median)
meds<-apply(resam,1,median)
median(fh)-median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians,c(0.025,0.975))
quantile(meds,c(0.025,0.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
head(BCcounts)
BCcounts
group
testStat
testStat(BCcounts,group)
obs<-testStat(BCcounts,group)
obs
mean(Bdata$count-Cdata$count)
sample(group)
perms<-sapply(1:10000,function elt[i] teststat(BCcounts,sample(group)))
perms<-sapply(1:10000,function(i) teststat(BCcounts,sample(group)))
perms<-sapply(1:10000,function(i) testStat(BCcounts,sample(group)))
mean(perms>obs)
testStat(DEcounts,group)
perms<-sapply(1:10000,function(i) testStat(DEcounts,sample(group)))
library(ggplot2)
qplot(displ,hwy,data=mpg,facet=.~grid)
qplot(displ,hwy,data=mpg,facets=.~grid)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(displ,hwy,data=mpg,facets=drv~.)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(displ,hwy,data=mpg,facets=drv~.)
exists("maacs")
data(maacs)
library(lattice)
xyplot(cyl,mtcars)
?xyplot
xyplot(mpg~cyl,mtcars)
names(mtcars)
xyplot(mpg~hp|cyl*gear,mtcars)
xyplot(mpg~hp|cyl*gear*am,mtcars)
xyplot(mpg~hp|cyl,mtcars)
xyplot(mpg~hp|cyl,mtcars)->a
class(a)
?fit
?lm
?loess
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel.lmline
?splom
?trellis.par.set
library(datasets)
data(airquality)
?qplot
qplot(ozone,windspeed,data=airquality,facets=.~month)
head(airquality)
qplot(Ozone,Wind,data=airquality,facets=.~Month)
?transfrom
?transform
qplot(Ozone,Wind,data=airquality,facets=.~factor(Month))
qplot(Wind,Ozone,data=airquality,facets=.~factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
rm(airquality);data(airquality);qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
rm(airquality);data(airquality);qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2movies)
library(ggplot2movies)
qplot(Wind, Ozone, data = airquality) + geom_smooth()
library(ggplot2)
data(airquality)
head(airquality)
Wind,y=Ozone)) +
geom_smooth(
ggplot(airquality,aes(x=Wind,y=Ozone)) +
geom_smooth(
ggplot(airquality,aes(x=Wind,y=Ozone)) +
geom_smooth(
ggplot(airquality,aes(x=Wind,y=Ozone)) +
geom_smooth()
ggplot(airquality,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
par(mfrow=c(2,2))
ggplot(airquality,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
p<-ggplot(airquality,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
multiplot(p_orig,p,p,p,cols=2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p_orig,p,p,p,cols=2)
p_orig<-ggplot(airquality,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
multiplot(p_orig,p,p,p,cols=2)
library(dplyr)
airquality.b<-cbind(airquality,mutate(airquality,Wind=Wind+rnorm()))
airquality.b<-cbind(airquality,mutate(airquality,Wind=Wind+rnorm(1)))
p1<-ggplot(airquality.b,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
ggplot(airquality.b,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
airquality.b<-rbind(airquality,mutate(airquality,Wind=Wind+rnorm(1)))
ggplot(airquality.b,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
airquality.b<-rbind(airquality,mutate(airquality,Wind=Wind+rnorm(1,mean = 20)))
ggplot(airquality.b,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
abs(1)
abs(-11)
airquality.c<-rbind(airquality,filter(airquality,abs(Wind-10)>1))
ggplot(airquality.c,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
airquality.c<-filter(airquality,abs(Wind-10)>1)
ggplot(airquality.c,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
airquality.d<-filter(airquality,abs(Wind-5)>2 & abs(Wind-15)>2)
ggplot(airquality.d,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
p_orig<-ggplot(airquality,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
airquality.b<-rbind(airquality,mutate(airquality,Wind=Wind+rnorm(1,sd=3)))
p1<-ggplot(airquality.b,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
airquality.c<-filter(airquality,abs(Wind-10)>2)
p2<-ggplot(airquality.c,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
airquality.d<-filter(airquality,abs(Wind-5)>2 & abs(Wind-15)>2)
p3<-ggplot(airquality.d,aes(x=Wind,y=Ozone)) +
geom_point()+
geom_smooth()
multiplot(p_orig,p1,p2,p3,cols=2)
?forecast
library(forecast)
install.packages(c("forecast", "forecastHybrid"))
library(forecast)
?forecast
?arima
library(forecast)
data(usconsumption)
data(austres)
fit<-nnetar(austres)
plot(forecast(fit,h=20))
mtcars%>%dim
library(dplyr)
mtcars%>%dim
sample(mtcars,5)
sample(1:length(mtcars),5)
?sample
x<-sample(mtcars,5)
x
dim(x)
dim(mtcars)
mtcars[sample(5),]
sample(5)
mtcars[sample(1:nrow(mtcars),5),]
rbinom(10,10,0.5)
rbinom(1,10,0.5)
rbinom(10,1,0.5)
ifelse(1:nrow(mtcars)%in%sample(floor(nrow(mtcars)/2)),1,0)
ifelse(1:nrow(mtcars)%in%sample(1:nrow(mtcars),floor(nrow(mtcars)/2)),1,0)
setwd("C:\\Users\\Sam\\Documents\\R\\ReproducibleAssign1\\RepData_PeerAssessment1-master")
# 1. Load the data (i.e. `read.csv()`)
##Set up
library(knitr)
library(rmarkdown)
library(dplyr)
library(ggplot2)
activity<-read.csv("activity/activity.csv")
#
# 2. Process/transform the data (if necessary) into a format suitable for your analysis
#
## Aggregate and groom the data
activity_agg<-activity %>%
group_by(date) %>%
summarise(totalsteps=sum(steps))
activity_alldays<-activity %>%
group_by(interval) %>%
summarise(meansteps=mean(steps, na.rm=TRUE))
# ### What is mean total number of steps taken per day?
#
# For this part of the assignment, you can ignore the missing values in
# the dataset.
#
# 1. Make a histogram of the total number of steps taken each day
hist(activity_agg$totalsteps, xlab = "Steps per Day", main="Steps per Day", col="blue", breaks = seq(0,25000,2500))
#
# 2. Calculate and report the **mean** and **median** total number of steps taken per day
mean(activity_agg$totalsteps, na.rm=TRUE)
median(activity_agg$totalsteps, na.rm=TRUE)
# ### What is the average daily activity pattern?
#
# 1. Make a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis)
##and the average number of steps taken, averaged across all days (y-axis)
ggplot(activity_alldays, aes(x=interval, y=meansteps)) +
geom_line(lwd=1.2,color="blue") +
labs(x="5-minute interval", y="Mean number of steps", title= "Average Number of Steps taken in Each 5 Minute Interval")
# 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
with(activity_alldays, interval[which(meansteps==max(meansteps))])
# ### Imputing missing values
#
# Note that there are a number of days/intervals where there are missing
# values (coded as `NA`). The presence of missing days may introduce
# bias into some calculations or summaries of the data.
#
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
sum(is.na(activity$steps))
# 2. Devise a strategy for filling in all of the missing values in the dataset.
# The strategy does not need to be sophisticated.
# For example, you could use the mean/median for that day, or the mean for that
# 5-minute interval, etc.
# Will use mean for the 5 min interval.
# 3. Create a new dataset that is equal to the original dataset but with the
# missing data filled in.
activity_imputed <- activity %>%
left_join(activity_alldays, by="interval") %>%
mutate(steps=ifelse(is.na(steps), meansteps, steps)) %>%
select(-meansteps)
# 4. Make a histogram of the total number of steps taken each day and Calculate
# and report the **mean** and **median** total number of steps taken per day.
# Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily
# number of steps?
activity_imputed_agg<-activity_imputed %>%
group_by(date) %>%
summarise(totalsteps=sum(steps))
hist(activity_imputed_agg$totalsteps, xlab = "Steps per Day", main="Steps per Day", col="blue", breaks = seq(0,25000,2500))
#Not a huge impact on histogram.  Same basic shape there and not much change in values
#
# 2. Calculate and report the **mean** and **median** total number of steps taken per day
mean(activity_imputed_agg$totalsteps, na.rm=TRUE)  # Mean is the same
median(activity_imputed_agg$totalsteps, na.rm=TRUE)  # Median is almost exactly the same
# ### Are there differences in activity patterns between weekdays and weekends?
# Use the dataset with the filled-in missing values for this part.
# 1. Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
activity_imputed <- mutate(activity_imputed,
weekday = factor(
ifelse(
weekdays(as.Date(date)) %in% c("Saturday","Sunday"),
"weekend", "weekday"
)
)
)
head(activity_imputed)
activity_imputed%>%select(date,weekday)%>%unique%>%head
activity_imputed%>%select(date,weekday)%>%unique%>%head(20)
activity_imputed <- activity %>%
left_join(activity_alldays, by="interval") %>%
mutate(steps=ifelse(is.na(steps), meansteps, steps)) %>%
select(-meansteps)
activity_imputed_weekdays <- mutate(activity_imputed,
weekday = factor(
ifelse(
weekdays(as.Date(date)) %in% c("Saturday","Sunday"),
"weekend", "weekday"
)
)
)
head(activity_imputed_weekdays)
activity_imputed_weekdays_agg <- activity_imputed_weekdays %>%
group_by(weekday,interval) %>%
summarise(meansteps=mean(steps))
head(activity_imputed_weekdays_agg)
sum(is.na(activity_imputed_weekdays_agg[,3]))
sum(is.na(activity_imputed_weekdays_agg[,1:3]))
dim(activity_imputed_weekdays_agg)
ggplot(activity_imputed_weekdays_agg, aes(x=interval, y=meansteps, color=weekday)) +
geom_line()+
facet_wrap(~weekday)
ggplot(activity_alldays, aes(x=interval, y=meansteps)) +
geom_line(lwd=1.2,color="blue") +
labs(x="5-minute interval", y="Mean number of steps", title= "Average Number of Steps taken in Each 5 Minute Interval")
ggplot(activity_alldays, aes(x=interval, y=meansteps)) +
geom_line(color="blue") +
labs(x="5-minute interval", y="Mean number of steps", title= "Average Number of Steps taken in Each 5 Minute Interval")
ggplot(activity_imputed_weekdays_agg, aes(x=interval, y=meansteps, color=weekday)) +
geom_line()+
facet_wrap(~weekday)+
labs(x="5-minute interval", y="Mean number of steps", title= "Average Number of Steps taken in Each 5 Minute Interval")
levels(activity_imputed_weekdays$weekday)
levels(activity_imputed_weekdays$weekday)<-c("Weekday","Weekend")
levels(activity_imputed_weekdays$weekday)
activity_imputed_weekdays_agg <- activity_imputed_weekdays %>%
group_by(weekday,interval) %>%
summarise(meansteps=mean(steps))
ggplot(activity_imputed_weekdays_agg, aes(x=interval, y=meansteps, color=weekday)) +
geom_line()+
facet_wrap(~weekday)+
labs(x="5-minute interval", y="Mean number of steps", title= "Average Number of Steps taken in Each 5 Minute Interval")
ggplot(activity_imputed_weekdays_agg, aes(x=interval, y=meansteps, color=weekday)) +
geom_line()+
facet_wrap(~weekday)+
labs(x="5-minute interval", y="Mean number of steps",
title= "Average Number of Steps taken in Each 5 Minute Interval")+
theme(legend.position="none")
hist(activity_agg$totalsteps, xlab = "Steps per Day", main="Steps per Day", col="blue", breaks = seq(0,25000,2500))
mean(activity_agg$totalsteps, na.rm=TRUE)
median(activity_agg$totalsteps, na.rm=TRUE)
ggplot(activity_alldays, aes(x=interval, y=meansteps)) +
geom_line(color="blue") +
labs(x="5-minute interval", y="Mean number of steps", title= "Average Number of Steps taken in Each 5 Minute Interval")
with(activity_alldays, interval[which(meansteps==max(meansteps))])
activity_imputed <- activity %>%
left_join(activity_alldays, by="interval") %>%
mutate(steps=ifelse(is.na(steps), meansteps, steps)) %>%
select(-meansteps)
activity_imputed_agg<-activity_imputed %>%
group_by(date) %>%
summarise(totalsteps=sum(steps))
hist(activity_imputed_agg$totalsteps, xlab = "Steps per Day", main="Steps per Day", col="blue", breaks = seq(0,25000,2500))
mean(activity_imputed_agg$totalsteps, na.rm=TRUE)  # Mean is the same
median(activity_imputed_agg$totalsteps, na.rm=TRUE)  # Median is almost exactly the same
activity_imputed_weekdays <- mutate(activity_imputed,
weekday = factor(
ifelse(
weekdays(as.Date(date)) %in% c("Saturday","Sunday"),
"weekend", "weekday"
)
)
)
levels(activity_imputed_weekdays$weekday)<-c("Weekday","Weekend")
activity_imputed_weekdays_agg <- activity_imputed_weekdays %>%
group_by(weekday,interval) %>%
summarise(meansteps=mean(steps))
ggplot(activity_imputed_weekdays_agg, aes(x=interval, y=meansteps, color=weekday)) +
geom_line()+
facet_wrap(~weekday)+
labs(x="5-minute interval", y="Mean number of steps",
title= "Average Number of Steps taken in Each 5 Minute Interval")+
theme(legend.position="none")
knit("PA1_template.Rmd",output = "PA1_template.html")
knit("PA1_template.Rmd",output = "PA1_template.html")
knit("PA1_template.Rmd",output = "PA1_template.html")
?knit
knit("PA1_template.Rmd",output = "PA1_template.html")
